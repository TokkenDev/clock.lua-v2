-- NeverLose UI Library

local NeverLoseUI = {}

-- Main UI Setup
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "NeverLoseUI"
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = CoreGui

local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 600, 0, 450)
MainFrame.Position = UDim2.new(0.5, -300, 0.5, -225)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local TopBar = Instance.new("Frame")
TopBar.Name = "TopBar"
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(0, 200, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "neverlose"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 14
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TopBar

local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 30, 1, 0)
CloseButton.Position = UDim2.new(1, -30, 0, 0)
CloseButton.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
CloseButton.BorderSizePixel = 0
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 14
CloseButton.Parent = TopBar

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

local TabContainer = Instance.new("Frame")
TabContainer.Name = "TabContainer"
TabContainer.Size = UDim2.new(1, 0, 0, 40)
TabContainer.Position = UDim2.new(0, 0, 0, 30)
TabContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
TabContainer.BorderSizePixel = 0
TabContainer.Parent = MainFrame

local ContentContainer = Instance.new("Frame")
ContentContainer.Name = "ContentContainer"
ContentContainer.Size = UDim2.new(1, 0, 1, -70)
ContentContainer.Position = UDim2.new(0, 0, 0, 70)
ContentContainer.BackgroundTransparency = 1
ContentContainer.Parent = MainFrame

-- Dragging functionality
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

TopBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TopBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Notification system
local NotificationFrame = Instance.new("Frame")
NotificationFrame.Name = "NotificationFrame"
NotificationFrame.Size = UDim2.new(0, 300, 0, 0)
NotificationFrame.Position = UDim2.new(1, -320, 1, -20)
NotificationFrame.BackgroundTransparency = 1
NotificationFrame.Parent = ScreenGui

function NeverLoseUI:Notify(title, text, duration)
    duration = duration or 5
    
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(1, 0, 0, 70)
    notification.Position = UDim2.new(0, 0, 1, 0)
    notification.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    notification.BorderSizePixel = 0
    notification.Parent = NotificationFrame
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -20, 0, 20)
    titleLabel.Position = UDim2.new(0, 10, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notification
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "Text"
    textLabel.Size = UDim2.new(1, -20, 1, -30)
    textLabel.Position = UDim2.new(0, 10, 0, 25)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text
    textLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextSize = 12
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.Parent = notification
    
    local line = Instance.new("Frame")
    line.Name = "Line"
    line.Size = UDim2.new(0, 3, 1, 0)
    line.Position = UDim2.new(0, 0, 0, 0)
    line.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    line.BorderSizePixel = 0
    line.Parent = notification
    
    -- Shift all notifications up
    for _, existingNotification in ipairs(NotificationFrame:GetChildren()) do
        if existingNotification:IsA("Frame") and existingNotification ~= notification then
            existingNotification.Position = UDim2.new(0, 0, 0, existingNotification.Position.Y.Offset - 75)
        end
    end
    
    notification.Position = UDim2.new(0, 0, 1, -75)
    
    local tweenIn = TweenService:Create(
        notification,
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Position = UDim2.new(0, 0, 1, 0)}
    )
    tweenIn:Play()
    
    wait(duration)
    
    local tweenOut = TweenService:Create(
        notification,
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Position = UDim2.new(0, 0, 1, -75)}
    )
    tweenOut:Play()
    
    tweenOut.Completed:Wait()
    
    -- Shift all notifications down
    for _, existingNotification in ipairs(NotificationFrame:GetChildren()) do
        if existingNotification:IsA("Frame") and existingNotification ~= notification then
            existingNotification.Position = UDim2.new(0, 0, 0, existingNotification.Position.Y.Offset + 75)
        end
    end
    
    notification:Destroy()
end

-- Tab system
local tabs = {}
local currentTab = nil

function NeverLoseUI:CreateTab(name)
    local tabButton = Instance.new("TextButton")
    tabButton.Name = name .. "Tab"
    tabButton.Size = UDim2.new(0, 100, 1, 0)
    tabButton.Position = UDim2.new(0, #tabs * 100, 0, 0)
    tabButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    tabButton.BorderSizePixel = 0
    tabButton.Text = name
    tabButton.TextColor3 = Color3.fromRGB(150, 150, 150)
    tabButton.Font = Enum.Font.GothamBold
    tabButton.TextSize = 13
    tabButton.Parent = TabContainer
    
    local tabContent = Instance.new("ScrollingFrame")
    tabContent.Name = name .. "Content"
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.Position = UDim2.new(0, 0, 0, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.ScrollBarThickness = 3
    tabContent.ScrollBarImageColor3 = Color3.fromRGB(50, 50, 50)
    tabContent.Visible = false
    tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabContent.Parent = ContentContainer
    
    local tab = {
        Name = name,
        Button = tabButton,
        Content = tabContent,
        Sections = {}
    }
    
    table.insert(tabs, tab)
    
    tabButton.MouseButton1Click:Connect(function()
        if currentTab then
            currentTab.Content.Visible = false
            currentTab.Button.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            currentTab.Button.TextColor3 = Color3.fromRGB(150, 150, 150)
        end
        
        currentTab = tab
        tab.Content.Visible = true
        tab.Button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        tab.Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    end)
    
    if #tabs == 1 then
        tabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabContent.Visible = true
        currentTab = tab
    end
    
    return tab
end

-- Section system
function NeverLoseUI:CreateSection(tab, name, side)
    side = side or "Left"
    
    local sectionFrame = Instance.new("Frame")
    sectionFrame.Name = name .. "Section"
    sectionFrame.Size = UDim2.new(0.5, -15, 0, 0)
    sectionFrame.Position = side == "Left" and UDim2.new(0, 10, 0, 10) or UDim2.new(0.5, 5, 0, 10)
    sectionFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    sectionFrame.BorderSizePixel = 0
    sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
    sectionFrame.Parent = tab.Content
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Name = "Title"
    sectionTitle.Size = UDim2.new(1, 0, 0, 30)
    sectionTitle.Position = UDim2.new(0, 0, 0, 0)
    sectionTitle.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    sectionTitle.BorderSizePixel = 0
    sectionTitle.Text = name
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.Font = Enum.Font.GothamBold
    sectionTitle.TextSize = 13
    sectionTitle.Parent = sectionFrame
    
    local contentContainer = Instance.new("Frame")
    contentContainer.Name = "Content"
    contentContainer.Size = UDim2.new(1, 0, 0, 0)
    contentContainer.Position = UDim2.new(0, 0, 0, 30)
    contentContainer.BackgroundTransparency = 1
    contentContainer.AutomaticSize = Enum.AutomaticSize.Y
    contentContainer.Parent = sectionFrame
    
    local section = {
        Name = name,
        Frame = sectionFrame,
        Content = contentContainer,
        Elements = {}
    }
    
    table.insert(tab.Sections, section)
    
    return section
end

-- UI Elements
function NeverLoseUI:CreateButton(section, text, callback)
    local button = Instance.new("TextButton")
    button.Name = text .. "Button"
    button.Size = UDim2.new(1, 0, 0, 30)
    button.Position = UDim2.new(0, 0, 0, #section.Elements * 35)
    button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.Gotham
    button.TextSize = 12
    button.Parent = section.Content
    
    local buttonHighlight = Instance.new("Frame")
    buttonHighlight.Name = "Highlight"
    buttonHighlight.Size = UDim2.new(0, 0, 1, 0)
    buttonHighlight.Position = UDim2.new(0, 0, 0, 0)
    buttonHighlight.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    buttonHighlight.BorderSizePixel = 0
    buttonHighlight.Parent = button
    
    button.MouseEnter:Connect(function()
        TweenService:Create(
            buttonHighlight,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Size = UDim2.new(1, 0, 1, 0)}
        ):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(
            buttonHighlight,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Size = UDim2.new(0, 0, 1, 0)}
        ):Play()
    end)
    
    button.MouseButton1Click:Connect(function()
        if callback then
            callback()
        end
    end)
    
    local element = {
        Type = "Button",
        Instance = button,
        Update = function(self, newText, newCallback)
            button.Text = newText or text
            callback = newCallback or callback
        end
    }
    
    table.insert(section.Elements, element)
    
    return element
end

function NeverLoseUI:CreateToggle(section, text, default, callback)
    default = default or false
    
    local toggle = Instance.new("Frame")
    toggle.Name = text .. "Toggle"
    toggle.Size = UDim2.new(1, 0, 0, 30)
    toggle.Position = UDim2.new(0, 0, 0, #section.Elements * 35)
    toggle.BackgroundTransparency = 1
    toggle.Parent = section.Content
    
    local toggleText = Instance.new("TextLabel")
    toggleText.Name = "Text"
    toggleText.Size = UDim2.new(0.7, 0, 1, 0)
    toggleText.Position = UDim2.new(0, 0, 0, 0)
    toggleText.BackgroundTransparency = 1
    toggleText.Text = text
    toggleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleText.Font = Enum.Font.Gotham
    toggleText.TextSize = 12
    toggleText.TextXAlignment = Enum.TextXAlignment.Left
    toggleText.Parent = toggle
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "Button"
    toggleButton.Size = UDim2.new(0.3, 0, 0, 20)
    toggleButton.Position = UDim2.new(0.7, 0, 0.5, -10)
    toggleButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = ""
    toggleButton.Parent = toggle
    
    local toggleIndicator = Instance.new("Frame")
    toggleIndicator.Name = "Indicator"
    toggleIndicator.Size = UDim2.new(0.5, 0, 1, 0)
    toggleIndicator.Position = default and UDim2.new(0.5, 0, 0, 0) or UDim2.new(0, 0, 0, 0)
    toggleIndicator.BackgroundColor3 = default and Color3.fromRGB(0, 150, 255) or Color3.fromRGB(70, 70, 70)
    toggleIndicator.BorderSizePixel = 0
    toggleIndicator.Parent = toggleButton
    
    toggleButton.MouseButton1Click:Connect(function()
        default = not default
        if default then
            TweenService:Create(
                toggleIndicator,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = UDim2.new(0.5, 0, 0, 0), BackgroundColor3 = Color3.fromRGB(0, 150, 255)}
            ):Play()
        else
            TweenService:Create(
                toggleIndicator,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = UDim2.new(0, 0, 0, 0), BackgroundColor3 = Color3.fromRGB(70, 70, 70)}
            ):Play()
        end
        
        if callback then
            callback(default)
        end
    end)
    
    local element = {
        Type = "Toggle",
        Instance = toggle,
        Value = default,
        Update = function(self, newText, newDefault, newCallback)
            toggleText.Text = newText or text
            if newDefault ~= nil and newDefault ~= default then
                default = newDefault
                if default then
                    toggleIndicator.Position = UDim2.new(0.5, 0, 0, 0)
                    toggleIndicator.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
                else
                    toggleIndicator.Position = UDim2.new(0, 0, 0, 0)
                    toggleIndicator.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                end
            end
            callback = newCallback or callback
        end
    }
    
    table.insert(section.Elements, element)
    
    return element
end

function NeverLoseUI:CreateSlider(section, text, min, max, default, callback)
    min = min or 0
    max = max or 100
    default = default or min
    
    local slider = Instance.new("Frame")
    slider.Name = text .. "Slider"
    slider.Size = UDim2.new(1, 0, 0, 50)
    slider.Position = UDim2.new(0, 0, 0, #section.Elements * 35)
    slider.BackgroundTransparency = 1
    slider.Parent = section.Content
    
    local sliderText = Instance.new("TextLabel")
    sliderText.Name = "Text"
    sliderText.Size = UDim2.new(1, 0, 0, 20)
    sliderText.Position = UDim2.new(0, 0, 0, 0)
    sliderText.BackgroundTransparency = 1
    sliderText.Text = text .. ": " .. default
    sliderText.TextColor3 = Color3.fromRGB(255, 255, 255)
    sliderText.Font = Enum.Font.Gotham
    sliderText.TextSize = 12
    sliderText.TextXAlignment = Enum.TextXAlignment.Left
    sliderText.Parent = slider
    
    local sliderBar = Instance.new("Frame")
    sliderBar.Name = "Bar"
    sliderBar.Size = UDim2.new(1, 0, 0, 5)
    sliderBar.Position = UDim2.new(0, 0, 0, 25)
    sliderBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    sliderBar.BorderSizePixel = 0
    sliderBar.Parent = slider
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "Fill"
    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBar
    
    local sliderButton = Instance.new("TextButton")
    sliderButton.Name = "Button"
    sliderButton.Size = UDim2.new(0, 15, 0, 15)
    sliderButton.Position = UDim2.new((default - min) / (max - min), -7.5, 0.5, -7.5)
    sliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderButton.BorderSizePixel = 0
    sliderButton.Text = ""
    sliderButton.Parent = sliderBar
    
    local dragging = false
    
    local function updateSlider(input)
        local pos = UDim2.new(
            math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1),
            0,
            0.5,
            -7.5
        )
        sliderButton.Position = pos
        sliderFill.Size = UDim2.new(pos.X.Scale, 0, 1, 0)
        
        local value = math.floor(min + (max - min) * pos.X.Scale)
        sliderText.Text = text .. ": " .. value
        
        if callback then
            callback(value)
        end
    end
    
    sliderButton.MouseButton1Down:Connect(function()
        dragging = true
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    sliderBar.MouseButton1Down:Connect(function(x, y)
        updateSlider({Position = Vector2.new(x, y)})
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    local element = {
        Type = "Slider",
        Instance = slider,
        Value = default,
        Update = function(self, newText, newMin, newMax, newDefault, newCallback)
            sliderText.Text = newText or text
            min = newMin or min
            max = newMax or max
            
            if newDefault ~= nil then
                default = math.clamp(newDefault, min, max)
                local pos = UDim2.new((default - min) / (max - min), -7.5, 0.5, -7.5)
                sliderButton.Position = pos
                sliderFill.Size = UDim2.new(pos.X.Scale + 0.5, 0, 1, 0)
                sliderText.Text = text .. ": " .. default
            end
            
            callback = newCallback or callback
        end
    }
    
    table.insert(section.Elements, element)
    
    return element
end

function NeverLoseUI:CreateDropdown(section, text, options, default, callback)
    options = options or {}
    default = default or (options[1] or nil)
    
    local dropdown = Instance.new("Frame")
    dropdown.Name = text .. "Dropdown"
    dropdown.Size = UDim2.new(1, 0, 0, 30)
    dropdown.Position = UDim2.new(0, 0, 0, #section.Elements * 35)
    dropdown.BackgroundTransparency = 1
    dropdown.ClipsDescendants = true
    dropdown.Parent = section.Content
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "Button"
    dropdownButton.Size = UDim2.new(1, 0, 0, 30)
    dropdownButton.Position = UDim2.new(0, 0, 0, 0)
    dropdownButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Text = text .. ": " .. (default or "None")
    dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.TextSize = 12
    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    dropdownButton.Parent = dropdown
    
    local dropdownArrow = Instance.new("TextLabel")
    dropdownArrow.Name = "Arrow"
    dropdownArrow.Size = UDim2.new(0, 20, 1, 0)
    dropdownArrow.Position = UDim2.new(1, -20, 0, 0)
    dropdownArrow.BackgroundTransparency = 1
    dropdownArrow.Text = "▼"
    dropdownArrow.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownArrow.Font = Enum.Font.Gotham
    dropdownArrow.TextSize = 12
    dropdownArrow.Parent = dropdownButton
    
    local dropdownOptions = Instance.new("Frame")
    dropdownOptions.Name = "Options"
    dropdownOptions.Size = UDim2.new(1, 0, 0, 0)
    dropdownOptions.Position = UDim2.new(0, 0, 0, 30)
    dropdownOptions.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    dropdownOptions.BorderSizePixel = 0
    dropdownOptions.AutomaticSize = Enum.AutomaticSize.Y
    dropdownOptions.Visible = false
    dropdownOptions.Parent = dropdown
    
    local optionList = Instance.new("UIListLayout")
    optionList.Name = "ListLayout"
    optionList.Parent = dropdownOptions
    
    local expanded = false
    
    local function toggleDropdown()
        expanded = not expanded
        
        if expanded then
            dropdownOptions.Visible = true
            dropdownArrow.Text = "▲"
            dropdown.Size = UDim2.new(1, 0, 0, 30 + (#options * 30))
        else
            dropdownOptions.Visible = false
            dropdownArrow.Text = "▼"
            dropdown.Size = UDim2.new(1, 0, 0, 30)
        end
    end
    
    dropdownButton.MouseButton1Click:Connect(toggleDropdown)
    
    local function createOption(option)
        local optionButton = Instance.new("TextButton")
        optionButton.Name = option .. "Option"
        optionButton.Size = UDim2.new(1, 0, 0, 30)
        optionButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        optionButton.BorderSizePixel = 0
        optionButton.Text = option
        optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionButton.Font = Enum.Font.Gotham
        optionButton.TextSize = 12
        optionButton.TextXAlignment = Enum.TextXAlignment.Left
        optionButton.Parent = dropdownOptions
        
        optionButton.MouseButton1Click:Connect(function()
            default = option
            dropdownButton.Text = text .. ": " .. option
            toggleDropdown()
            
            if callback then
                callback(option)
            end
        end)
    end
    
    for _, option in ipairs(options) do
        createOption(option)
    end
    
    local element = {
        Type = "Dropdown",
        Instance = dropdown,
        Value = default,
        Update = function(self, newText, newOptions, newDefault, newCallback)
            dropdownButton.Text = newText or text
            text = newText or text
            
            if newOptions then
                options = newOptions
                dropdownOptions:ClearAllChildren()
                
                local optionList = Instance.new("UIListLayout")
                optionList.Name = "ListLayout"
                optionList.Parent = dropdownOptions
                
                for _, option in ipairs(options) do
                    createOption(option)
                end
                
                if expanded then
                    dropdown.Size = UDim2.new(1, 0, 0, 30 + (#options * 30))
                end
            end
            
            if newDefault ~= nil then
                default = newDefault
                dropdownButton.Text = text .. ": " .. default
            end
            
            callback = newCallback or callback
        end
    }
    
    table.insert(section.Elements, element)
    
    return element
end

function NeverLoseUI:CreateMultiDropdown(section, text, options, default, callback)
    options = options or {}
    default = default or {}
    
    local dropdown = Instance.new("Frame")
    dropdown.Name = text .. "MultiDropdown"
    dropdown.Size = UDim2.new(1, 0, 0, 30)
    dropdown.Position = UDim2.new(0, 0, 0, #section.Elements * 35)
    dropdown.BackgroundTransparency = 1
    dropdown.ClipsDescendants = true
    dropdown.Parent = section.Content
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "Button"
    dropdownButton.Size = UDim2.new(1, 0, 0, 30)
    dropdownButton.Position = UDim2.new(0, 0, 0, 0)
    dropdownButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Text = text .. ": " .. (#default > 0 and table.concat(default, ", ") or "None")
    dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.TextSize = 12
    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    dropdownButton.Parent = dropdown
    
    local dropdownArrow = Instance.new("TextLabel")
    dropdownArrow.Name = "Arrow"
    dropdownArrow.Size = UDim2.new(0, 20, 1, 0)
    dropdownArrow.Position = UDim2.new(1, -20, 0, 0)
    dropdownArrow.BackgroundTransparency = 1
    dropdownArrow.Text = "▼"
    dropdownArrow.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownArrow.Font = Enum.Font.Gotham
    dropdownArrow.TextSize = 12
    dropdownArrow.Parent = dropdownButton
    
    local dropdownOptions = Instance.new("Frame")
    dropdownOptions.Name = "Options"
    dropdownOptions.Size = UDim2.new(1, 0, 0, 0)
    dropdownOptions.Position = UDim2.new(0, 0, 0, 30)
    dropdownOptions.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    dropdownOptions.BorderSizePixel = 0
    dropdownOptions.AutomaticSize = Enum.AutomaticSize.Y
    dropdownOptions.Visible = false
    dropdownOptions.Parent = dropdown
    
    local optionList = Instance.new("UIListLayout")
    optionList.Name = "ListLayout"
    optionList.Parent = dropdownOptions
    
    local expanded = false
    
    local function toggleDropdown()
        expanded = not expanded
        
        if expanded then
            dropdownOptions.Visible = true
            dropdownArrow.Text = "▲"
            dropdown.Size = UDim2.new(1, 0, 0, 30 + (#options * 30))
        else
            dropdownOptions.Visible = false
            dropdownArrow.Text = "▼"
            dropdown.Size = UDim2.new(1, 0, 0, 30)
        end
    end
    
    dropdownButton.MouseButton1Click:Connect(toggleDropdown)
    
    local function isSelected(option)
        for _, selected in ipairs(default) do
            if selected == option then
                return true
            end
        end
        return false
    end
    
    local function createOption(option)
        local optionFrame = Instance.new("Frame")
        optionFrame.Name = option .. "Option"
        optionFrame.Size = UDim2.new(1, 0, 0, 30)
        optionFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        optionFrame.BorderSizePixel = 0
        optionFrame.Parent = dropdownOptions
        
        local optionButton = Instance.new("TextButton")
        optionButton.Name = "Button"
        optionButton.Size = UDim2.new(1, 0, 1, 0)
        optionButton.BackgroundTransparency = 1
        optionButton.Text = option
        optionButton.TextColor3 = isSelected(option) and Color3.fromRGB(0, 150, 255) or Color3.fromRGB(255, 255, 255)
        optionButton.Font = Enum.Font.Gotham
        optionButton.TextSize = 12
        optionButton.TextXAlignment = Enum.TextXAlignment.Left
        optionButton.Parent = optionFrame
        
        optionButton.MouseButton1Click:Connect(function()
            local found = false
            for i, selected in ipairs(default) do
                if selected == option then
                    table.remove(default, i)
                    found = true
                    break
                end
            end
            
            if not found then
                table.insert(default, option)
            end
            
            optionButton.TextColor3 = isSelected(option) and Color3.fromRGB(0, 150, 255) or Color3.fromRGB(255, 255, 255)
            dropdownButton.Text = text .. ": " .. (#default > 0 and table.concat(default, ", ") or "None")
            
            if callback then
                callback(default)
            end
        end)
    end
    
    for _, option in ipairs(options) do
        createOption(option)
    end
    
    local element = {
        Type = "MultiDropdown",
        Instance = dropdown,
        Value = default,
        Update = function(self, newText, newOptions, newDefault, newCallback)
            dropdownButton.Text = newText or text
            text = newText or text
            
            if newOptions then
                options = newOptions
                dropdownOptions:ClearAllChildren()
                
                local optionList = Instance.new("UIListLayout")
                optionList.Name = "ListLayout"
                optionList.Parent = dropdownOptions
                
                for _, option in ipairs(options) do
                    createOption(option)
                end
                
                if expanded then
                    dropdown.Size = UDim2.new(1, 0, 0, 30 + (#options * 30))
                end
            end
            
            if newDefault ~= nil then
                default = newDefault
                dropdownButton.Text = text .. ": " .. (#default > 0 and table.concat(default, ", ") or "None")
                
                -- Update option colors
                for _, optionFrame in ipairs(dropdownOptions:GetChildren()) do
                    if optionFrame:IsA("Frame") and optionFrame:FindFirstChild("Button") then
                        local option = optionFrame.Button.Text
                        optionFrame.Button.TextColor3 = isSelected(option) and Color3.fromRGB(0, 150, 255) or Color3.fromRGB(255, 255, 255)
                    end
                end
            end
            
            callback = newCallback or callback
        end
    }
    
    table.insert(section.Elements, element)
    
    return element
end

function NeverLoseUI:CreateKeybind(section, text, default, callback)
    default = default or Enum.KeyCode.Unknown
    
    local keybind = Instance.new("Frame")
    keybind.Name = text .. "Keybind"
    keybind.Size = UDim2.new(1, 0, 0, 30)
    keybind.Position = UDim2.new(0, 0, 0, #section.Elements * 35)
    keybind.BackgroundTransparency = 1
    keybind.Parent = section.Content
    
    local keybindText = Instance.new("TextLabel")
    keybindText.Name = "Text"
    keybindText.Size = UDim2.new(0.7, 0, 1, 0)
    keybindText.Position = UDim2.new(0, 0, 0, 0)
    keybindText.BackgroundTransparency = 1
    keybindText.Text = text
    keybindText.TextColor3 = Color3.fromRGB(255, 255, 255)
    keybindText.Font = Enum.Font.Gotham
    keybindText.TextSize = 12
    keybindText.TextXAlignment = Enum.TextXAlignment.Left
    keybindText.Parent = keybind
    
    local keybindButton = Instance.new("TextButton")
    keybindButton.Name = "Button"
    keybindButton.Size = UDim2.new(0.3, 0, 0, 20)
    keybindButton.Position = UDim2.new(0.7, 0, 0.5, -10)
    keybindButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    keybindButton.BorderSizePixel = 0
    keybindButton.Text = default ~= Enum.KeyCode.Unknown and tostring(default):gsub("Enum.KeyCode.", "") or "None"
    keybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    keybindButton.Font = Enum.Font.Gotham
    keybindButton.TextSize = 12
    keybindButton.Parent = keybind
    
    local listening = false
    
    keybindButton.MouseButton1Click:Connect(function()
        listening = true
        keybindButton.Text = "..."
        keybindButton.TextColor3 = Color3.fromRGB(0, 150, 255)
    end)
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not listening or gameProcessed then return end
        
        if input.UserInputType == Enum.UserInputType.Keyboard then
            default = input.KeyCode
            keybindButton.Text = tostring(input.KeyCode):gsub("Enum.KeyCode.", "")
            keybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            listening = false
            
            if callback then
                callback(input.KeyCode)
            end
        elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
            default = Enum.KeyCode.Unknown
            keybindButton.Text = "None"
            keybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            listening = false
            
            if callback then
                callback(Enum.KeyCode.Unknown)
            end
        end
    end)
    
    local element = {
        Type = "Keybind",
        Instance = keybind,
        Value = default,
        Update = function(self, newText, newDefault, newCallback)
            keybindText.Text = newText or text
            if newDefault ~= nil then
                default = newDefault
                keybindButton.Text = default ~= Enum.KeyCode.Unknown and tostring(default):gsub("Enum.KeyCode.", "") or "None"
            end
            callback = newCallback or callback
        end
    }
    
    table.insert(section.Elements, element)
    
    return element
end

function NeverLoseUI:CreateColorPicker(section, text, default, callback)
    default = default or Color3.fromRGB(0, 150, 255)
    
    local colorPicker = Instance.new("Frame")
    colorPicker.Name = text .. "ColorPicker"
    colorPicker.Size = UDim2.new(1, 0, 0, 30)
    colorPicker.Position = UDim2.new(0, 0, 0, #section.Elements * 35)
    colorPicker.BackgroundTransparency = 1
    colorPicker.Parent = section.Content
    
    local colorPickerText = Instance.new("TextLabel")
    colorPickerText.Name = "Text"
    colorPickerText.Size = UDim2.new(0.7, 0, 1, 0)
    colorPickerText.Position = UDim2.new(0, 0, 0, 0)
    colorPickerText.BackgroundTransparency = 1
    colorPickerText.Text = text
    colorPickerText.TextColor3 = Color3.fromRGB(255, 255, 255)
    colorPickerText.Font = Enum.Font.Gotham
    colorPickerText.TextSize = 12
    colorPickerText.TextXAlignment = Enum.TextXAlignment.Left
    colorPickerText.Parent = colorPicker
    
    local colorPickerButton = Instance.new("TextButton")
    colorPickerButton.Name = "Button"
    colorPickerButton.Size = UDim2.new(0.3, 0, 0, 20)
    colorPickerButton.Position = UDim2.new(0.7, 0, 0.5, -10)
    colorPickerButton.BackgroundColor3 = default
    colorPickerButton.BorderSizePixel = 0
    colorPickerButton.Text = ""
    colorPickerButton.Parent = colorPicker
    
    local colorPickerFrame = Instance.new("Frame")
    colorPickerFrame.Name = "Picker"
    colorPickerFrame.Size = UDim2.new(0, 200, 0, 150)
    colorPickerFrame.Position = UDim2.new(1, 5, 0, 0)
    colorPickerFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    colorPickerFrame.BorderSizePixel = 0
    colorPickerFrame.Visible = false
    colorPickerFrame.Parent = colorPicker
    
    local hueSlider = Instance.new("Frame")
    hueSlider.Name = "HueSlider"
    hueSlider.Size = UDim2.new(0, 20, 0, 130)
    hueSlider.Position = UDim2.new(0, 170, 0, 10)
    hueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueSlider.BorderSizePixel = 0
    hueSlider.Parent = colorPickerFrame
    
    local saturationValuePicker = Instance.new("ImageButton")
    saturationValuePicker.Name = "SaturationValuePicker"
    saturationValuePicker.Size = UDim2.new(0, 150, 0, 130)
    saturationValuePicker.Position = UDim2.new(0, 10, 0, 10)
    saturationValuePicker.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    saturationValuePicker.BorderSizePixel = 0
    saturationValuePicker.Parent = colorPickerFrame
    
    local saturationValueCursor = Instance.new("Frame")
    saturationValueCursor.Name = "Cursor"
    saturationValueCursor.Size = UDim2.new(0, 5, 0, 5)
    saturationValueCursor.Position = UDim2.new(0.5, -2.5, 0.5, -2.5)
    saturationValueCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    saturationValueCursor.BorderSizePixel = 1
    saturationValueCursor.BorderColor3 = Color3.fromRGB(0, 0, 0)
    saturationValueCursor.Parent = saturationValuePicker
    
    local hueCursor = Instance.new("Frame")
    hueCursor.Name = "Cursor"
    hueCursor.Size = UDim2.new(1, 0, 0, 2)
    hueCursor.Position = UDim2.new(0, 0, 0, 0)
    hueCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueCursor.BorderSizePixel = 1
    hueCursor.BorderColor3 = Color3.fromRGB(0, 0, 0)
    hueCursor.Parent = hueSlider
    
    local rgbInput = Instance.new("Frame")
    rgbInput.Name = "RGBInput"
    rgbInput.Size = UDim2.new(1, -20, 0, 20)
    rgbInput.Position = UDim2.new(0, 10, 1, -30)
    rgbInput.BackgroundTransparency = 1
    rgbInput.Parent = colorPickerFrame
    
    local rgbLabel = Instance.new("TextLabel")
    rgbLabel.Name = "Label"
    rgbLabel.Size = UDim2.new(0, 30, 1, 0)
    rgbLabel.Position = UDim2.new(0, 0, 0, 0)
    rgbLabel.BackgroundTransparency = 1
    rgbLabel.Text = "RGB:"
    rgbLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    rgbLabel.Font = Enum.Font.Gotham
    rgbLabel.TextSize = 12
    rgbLabel.TextXAlignment = Enum.TextXAlignment.Left
    rgbLabel.Parent = rgbInput
    
    local rgbTextBox = Instance.new("TextBox")
    rgbTextBox.Name = "TextBox"
    rgbTextBox.Size = UDim2.new(1, -30, 1, 0)
    rgbTextBox.Position = UDim2.new(0, 30, 0, 0)
    rgbTextBox.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    rgbTextBox.BorderSizePixel = 0
    rgbTextBox.Text = string.format("%d, %d, %d", math.floor(default.R * 255), math.floor(default.G * 255), math.floor(default.B * 255))
    rgbTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    rgbTextBox.Font = Enum.Font.Gotham
    rgbTextBox.TextSize = 12
    rgbTextBox.Parent = rgbInput
    
    local hexInput = Instance.new("Frame")
    hexInput.Name = "HexInput"
    hexInput.Size = UDim2.new(1, -20, 0, 20)
    hexInput.Position = UDim2.new(0, 10, 1, -5)
    hexInput.BackgroundTransparency = 1
    hexInput.Parent = colorPickerFrame
    
    local hexLabel = Instance.new("TextLabel")
    hexLabel.Name = "Label"
    hexLabel.Size = UDim2.new(0, 30, 1, 0)
    hexLabel.Position = UDim2.new(0, 0, 0, 0)
    hexLabel.BackgroundTransparency = 1
    hexLabel.Text = "HEX:"
    hexLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    hexLabel.Font = Enum.Font.Gotham
    hexLabel.TextSize = 12
    hexLabel.TextXAlignment = Enum.TextXAlignment.Left
    hexLabel.Parent = hexInput
    
    local hexTextBox = Instance.new("TextBox")
    hexTextBox.Name = "TextBox"
    hexTextBox.Size = UDim2.new(1, -30, 1, 0)
    hexTextBox.Position = UDim2.new(0, 30, 0, 0)
    hexTextBox.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    hexTextBox.BorderSizePixel = 0
    hexTextBox.Text = "#" .. string.format("%02X%02X%02X", math.floor(default.R * 255), math.floor(default.G * 255), math.floor(default.B * 255))
    hexTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    hexTextBox.Font = Enum.Font.Gotham
    hexTextBox.TextSize = 12
    hexTextBox.Parent = hexInput
    
    local open = false
    
    local function updateColor(color)
        colorPickerButton.BackgroundColor3 = color
        rgbTextBox.Text = string.format("%d, %d, %d", math.floor(color.R * 255), math.floor(color.G * 255), math.floor(color.B * 255))
        hexTextBox.Text = "#" .. string.format("%02X%02X%02X", math.floor(color.R * 255), math.floor(color.G * 255), math.floor(color.B * 255))
        
        if callback then
            callback(color)
        end
    end
    
    local function hsvToRgb(h, s, v)
        local r, g, b
        
        local i = math.floor(h * 6)
        local f = h * 6 - i
        local p = v * (1 - s)
        local q = v * (1 - f * s)
        local t = v * (1 - (1 - f) * s)
        
        i = i % 6
        
        if i == 0 then
            r, g, b = v, t, p
        elseif i == 1 then
            r, g, b = q, v, p
        elseif i == 2 then
            r, g, b = p, v, t
        elseif i == 3 then
            r, g, b = p, q, v
        elseif i == 4 then
            r, g, b = t, p, v
        elseif i == 5 then
            r, g, b = v, p, q
        end
        
        return Color3.new(r, g, b)
    end
    
    local function rgbToHsv(color)
        local r, g, b = color.R, color.G, color.B
        local max, min = math.max(r, g, b), math.min(r, g, b)
        local h, s, v
        
        v = max
        
        local d = max - min
        if max == 0 then
            s = 0
        else
            s = d / max
        end
        
        if max == min then
            h = 0
        else
            if max == r then
                h = (g - b) / d
                if g < b then
                    h = h + 6
                end
            elseif max == g then
                h = (b - r) / d + 2
            elseif max == b then
                h = (r - g) / d + 4
            end
            h = h / 6
        end
        
        return h, s, v
    end
    
    local h, s, v = rgbToHsv(default)
    
    local function updateHue(newH)
        h = newH
        local color = hsvToRgb(h, 1, 1)
        saturationValuePicker.BackgroundColor3 = color
        hueCursor.Position = UDim2.new(0, 0, h, 0)
        
        local currentColor = hsvToRgb(h, s, v)
        updateColor(currentColor)
    end
    
    local function updateSaturationValue(newS, newV)
        s = newS
        v = newV
        saturationValueCursor.Position = UDim2.new(s, -2.5, 1 - v, -2.5)
        
        local currentColor = hsvToRgb(h, s, v)
        updateColor(currentColor)
    end
    
    -- Create hue gradient
    for i = 0, 1, 0.1 do
        local huePart = Instance.new("Frame")
        huePart.Size = UDim2.new(1, 0, 0.1, 0)
        huePart.Position = UDim2.new(0, 0, i, 0)
        huePart.BackgroundColor3 = hsvToRgb(i, 1, 1)
        huePart.BorderSizePixel = 0
        huePart.Parent = hueSlider
    end
    
    -- Set initial values
    updateHue(h)
    updateSaturationValue(s, v)
    
    -- Picker interactions
    local hueDragging = false
    local svDragging = false
    
    hueSlider.MouseButton1Down:Connect(function(x, y)
        hueDragging = true
        local relativeY = (y - hueSlider.AbsolutePosition.Y) / hueSlider.AbsoluteSize.Y
        updateHue(math.clamp(relativeY, 0, 1))
    end)
    
    saturationValuePicker.MouseButton1Down:Connect(function(x, y)
        svDragging = true
        local relativeX = (x - saturationValuePicker.AbsolutePosition.X) / saturationValuePicker.AbsoluteSize.X
        local relativeY = (y - saturationValuePicker.AbsolutePosition.Y) / saturationValuePicker.AbsoluteSize.Y
        updateSaturationValue(math.clamp(relativeX, 0, 1), math.clamp(1 - relativeY, 0, 1))
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            hueDragging = false
            svDragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if hueDragging then
                local y = input.Position.Y
                local relativeY = (y - hueSlider.AbsolutePosition.Y) / hueSlider.AbsoluteSize.Y
                updateHue(math.clamp(relativeY, 0, 1))
            elseif svDragging then
                local x = input.Position.X
                local y = input.Position.Y
                local relativeX = (x - saturationValuePicker.AbsolutePosition.X) / saturationValuePicker.AbsoluteSize.X
                local relativeY = (y - saturationValuePicker.AbsolutePosition.Y) / saturationValuePicker.AbsoluteSize.Y
                updateSaturationValue(math.clamp(relativeX, 0, 1), math.clamp(1 - relativeY, 0, 1))
            end
        end
    end)
    
    -- Text box inputs
    rgbTextBox.FocusLost:Connect(function()
        local success, r, g, b = pcall(function()
            local parts = {}
            for part in string.gmatch(rgbTextBox.Text, "%d+") do
                table.insert(parts, tonumber(part))
            end
            return unpack(parts)
        end)
        
        if success and r and g and b then
            local color = Color3.fromRGB(math.clamp(r, 0, 255), math.clamp(g, 0, 255), math.clamp(b, 0, 255))
            local newH, newS, newV = rgbToHsv(color)
            h, s, v = newH, newS, newV
            updateHue(h)
            updateSaturationValue(s, v)
        else
            rgbTextBox.Text = string.format("%d, %d, %d", math.floor(default.R * 255), math.floor(default.G * 255), math.floor(default.B * 255))
        end
    end)
    
    hexTextBox.FocusLost:Connect(function()
        local hex = hexTextBox.Text:gsub("#", "")
        if #hex == 3 then
            hex = hex:gsub("(.)", "%1%1")
        end
        
        if #hex == 6 then
            local success, r, g, b = pcall(function()
                return tonumber(hex:sub(1, 2), tonumber(hex:sub(3, 4), tonumber(hex:sub(5, 6))
            end)
            
            if success and r and g and b then
                local color = Color3.fromRGB(r, g, b)
                local newH, newS, newV = rgbToHsv(color)
                h, s, v = newH, newS, newV
                updateHue(h)
                updateSaturationValue(s, v)
                return
            end
        end
        
        hexTextBox.Text = "#" .. string.format("%02X%02X%02X", math.floor(default.R * 255), math.floor(default.G * 255), math.floor(default.B * 255))
    end)
    
    colorPickerButton.MouseButton1Click:Connect(function()
        open = not open
        colorPickerFrame.Visible = open
    end)
    
    local element = {
        Type = "ColorPicker",
        Instance = colorPicker,
        Value = default,
        Update = function(self, newText, newDefault, newCallback)
            colorPickerText.Text = newText or text
            if newDefault ~= nil then
                default = newDefault
                colorPickerButton.BackgroundColor3 = default
                h, s, v = rgbToHsv(default)
                updateHue(h)
                updateSaturationValue(s, v)
            end
            callback = newCallback or callback
        end
    }
    
    table.insert(section.Elements, element)
    
    return element
end

return NeverLoseUI
